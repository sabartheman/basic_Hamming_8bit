-- -------------------------------------------------------------
-- 
-- File Name: /home/sky/Documents/MATLAB/Hamming/codegen/Hamming_encoding/hdlsrc/Hamming_encoding_fixpt_tb.vhd
-- Created: 2019-03-29 14:24:51
-- 
-- Generated by MATLAB 9.5, MATLAB Coder 4.1 and HDL Coder 3.13
-- 
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1
-- Target subsystem base rate: 1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Hamming_encoding_fixpt_tb
-- Source Path: 
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_textio.ALL;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
LIBRARY STD;
USE STD.textio.ALL;
USE work.Hamming_encoding_fixpt_tb_pkg.ALL;

ENTITY Hamming_encoding_fixpt_tb IS
END Hamming_encoding_fixpt_tb;


ARCHITECTURE rtl OF Hamming_encoding_fixpt_tb IS

  -- Component Declarations
  COMPONENT Hamming_encoding_fixpt
    PORT( data                            :   IN    std_logic_vector(0 TO 7);  -- ufix1 [8]
          out_encoded                     :   OUT   std_logic_vector(0 TO 11)  -- ufix1 [12]
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Hamming_encoding_fixpt
    USE ENTITY work.Hamming_encoding_fixpt(rtl);

  -- Signals
  SIGNAL clk                              : std_logic;
  SIGNAL reset                            : std_logic;
  SIGNAL enb                              : std_logic;
  SIGNAL out_encoded_addr                 : std_logic;  -- ufix1
  SIGNAL out_encoded_lastAddr             : std_logic;  -- ufix1
  SIGNAL check1_done                      : std_logic;  -- ufix1
  SIGNAL snkDonen                         : std_logic;
  SIGNAL resetn                           : std_logic;
  SIGNAL tb_enb                           : std_logic;
  SIGNAL rdEnb                            : std_logic;
  SIGNAL out_encoded_done                 : std_logic;  -- ufix1
  SIGNAL out_encoded_done_enb             : std_logic;  -- ufix1
  SIGNAL rawData_data                     : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL holdData_data                    : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL ce_out                           : std_logic;
  SIGNAL data_offset                      : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL data_1                           : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL out_encoded                      : std_logic_vector(0 TO 11);  -- ufix1 [12]
  SIGNAL out_encoded_expected_1           : std_logic_vector(0 TO 11);  -- ufix1 [12]
  SIGNAL out_encoded_ref                  : std_logic_vector(0 TO 11);  -- ufix1 [12]
  SIGNAL out_encoded_testFailure          : std_logic;  -- ufix1

BEGIN
  u_Hamming_encoding_fixpt : Hamming_encoding_fixpt
    PORT MAP( data => data_1,  -- ufix1 [8]
              out_encoded => out_encoded  -- ufix1 [12]
              );

  out_encoded_lastAddr <= '1';

  snkDonen <=  NOT check1_done;

  tb_enb <= resetn AND snkDonen;

  
  rdEnb <= tb_enb WHEN check1_done = '0' ELSE
      '0';

  out_encoded_done_enb <= out_encoded_done AND rdEnb;

  clk_gen: PROCESS 
  BEGIN
    clk <= '1';
    WAIT FOR 5 ns;
    clk <= '0';
    WAIT FOR 5 ns;
    IF check1_done = '1' THEN
      clk <= '1';
      WAIT FOR 5 ns;
      clk <= '0';
      WAIT FOR 5 ns;
      WAIT;
    END IF;
  END PROCESS clk_gen;

  reset_gen: PROCESS 
  BEGIN
    reset <= '1';
    WAIT FOR 20 ns;
    WAIT UNTIL clk'event AND clk = '1';
    WAIT FOR 2 ns;
    reset <= '0';
    WAIT;
  END PROCESS reset_gen;

  resetn <=  NOT reset;

  out_encoded_done <= out_encoded_lastAddr AND resetn;

  -- Delay to allow last sim cycle to complete
  checkDone_1_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      check1_done <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF out_encoded_done_enb = '1' THEN
        check1_done <= out_encoded_done;
      END IF;
    END IF;
  END PROCESS checkDone_1_process;

  enb <= rdEnb AFTER 2 ns;

  -- Data source for data
  rawData_data(0) <= '1';
  rawData_data(1) <= '0';
  rawData_data(2) <= '1';
  rawData_data(3) <= '0';
  rawData_data(4) <= '1';
  rawData_data(5) <= '1';
  rawData_data(6) <= '0';
  rawData_data(7) <= '0';

  -- holdData reg for data
  stimuli_data_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      holdData_data <= (OTHERS => 'X');
    ELSIF clk'event AND clk = '1' THEN
      holdData_data <= rawData_data;
    END IF;
  END PROCESS stimuli_data_process;

  ce_out <= enb AND (rdEnb AND tb_enb);

  stimuli_data_1: PROCESS (rawData_data, rdEnb)
  BEGIN
    IF rdEnb = '0' THEN
      data_offset <= holdData_data;
    ELSE
      data_offset <= rawData_data;
    END IF;
  END PROCESS stimuli_data_1;

  data_1 <= data_offset AFTER 2 ns;

  -- Data source for out_encoded_expected
  out_encoded_expected_1(0) <= '0';
  out_encoded_expected_1(1) <= '1';
  out_encoded_expected_1(2) <= '1';
  out_encoded_expected_1(3) <= '1';
  out_encoded_expected_1(4) <= '0';
  out_encoded_expected_1(5) <= '1';
  out_encoded_expected_1(6) <= '0';
  out_encoded_expected_1(7) <= '0';
  out_encoded_expected_1(8) <= '1';
  out_encoded_expected_1(9) <= '1';
  out_encoded_expected_1(10) <= '0';
  out_encoded_expected_1(11) <= '0';

  out_encoded_ref <= out_encoded_expected_1;

  out_encoded_checker: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      out_encoded_testFailure <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF ce_out = '1' AND out_encoded /= out_encoded_ref THEN
        out_encoded_testFailure <= '1';
        ASSERT FALSE
          REPORT "Error in out_encoded: Expected " & to_hex(out_encoded_ref) & (" Actual " & to_hex(out_encoded))
          SEVERITY ERROR;
      END IF;
    END IF;
  END PROCESS out_encoded_checker;

  completed_msg: PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF check1_done = '1' THEN
        IF out_encoded_testFailure = '0' THEN
          ASSERT FALSE
            REPORT "**************TEST COMPLETED (PASSED)**************"
            SEVERITY NOTE;
        ELSE
          ASSERT FALSE
            REPORT "**************TEST COMPLETED (FAILED)**************"
            SEVERITY NOTE;
        END IF;
      END IF;
    END IF;
  END PROCESS completed_msg;

END rtl;

