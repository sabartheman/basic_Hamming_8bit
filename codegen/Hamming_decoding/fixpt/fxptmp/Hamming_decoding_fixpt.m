%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                          %
%           Generated by MATLAB 9.5 and Fixed-Point Designer 6.2           %
%                                                                          %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%#codegen
function [output,errorPosition] = Hamming_decoding_fixpt(input_encoded)

fm = get_fimath();

hammingCode = fi(input_encoded, 0, 1, 0, fm);

%intializing vector for possible error positions
parityErrors = fi([0 0 0 0], 0, 1, 0, fm);

%sets the first parity bit, if the sum of the checked values is even then
%the result is 0, odd = 1
if(hammingCode(1) ~= xor(xor(xor(xor(hammingCode(3),hammingCode(5)),hammingCode(7)),hammingCode(9)),hammingCode(11)))         
    parityErrors(1) = 1;
end
    
%sets the second parity bit
if(hammingCode(2) ~= xor(xor(xor(xor(hammingCode(3),hammingCode(6)),hammingCode(7)),hammingCode(10)),hammingCode(11)))
    parityErrors(2) = 2; 
end 

%sets the third parity bit
if(hammingCode(4) ~= xor(xor(xor(hammingCode(5),hammingCode(6)),hammingCode(7)),hammingCode(12)))
    parityErrors(3) = 4;
end

%sets the fourth paritybit
if(hammingCode(8) ~= xor(xor(xor(hammingCode(9),hammingCode(10)),hammingCode(11)),hammingCode(12)))                     
    parityErrors(4) = 8;
end

%finding how paritybits are wrong + 1
[fmo_1,fmo_2] = size(parityErrors);
rows = fi(fmo_1, 0, 1, 0, fm);
columns = fi(fmo_2, 0, 3, 0, fm);

errorBit = fi(0, 0, 1, 0, fm);
for x = fi(1, 0, 1, 0, fm):columns
   errorBit(:) = errorBit + parityErrors(x);
end

%corrects the 1 bit flip in the hamming code
if(errorBit > fi(0, 0, 1, 0, fm)) 
    hammingCode(errorBit) = ~(hammingCode(errorBit) ~= 0 );
end
    
output = fi(hammingCode, 0, 1, 0, fm)
errorPosition = fi(errorBit, 0, 1, 0, fm)

end


function fm = get_fimath()
	fm = fimath('RoundingMethod', 'Floor',...
	     'OverflowAction', 'Wrap',...
	     'ProductMode','FullPrecision',...
	     'MaxProductWordLength', 128,...
	     'SumMode','FullPrecision',...
	     'MaxSumWordLength', 128);
end
