-- -------------------------------------------------------------
-- 
-- File Name: /home/sky/Documents/MATLAB/Hamming/codegen/Hamming_decoding/hdlsrc/Hamming_decoding_fixpt_tb.vhd
-- Created: 2019-04-03 17:41:01
-- 
-- Generated by MATLAB 9.5, MATLAB Coder 4.1 and HDL Coder 3.13
-- 
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1
-- Target subsystem base rate: 1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Hamming_decoding_fixpt_tb
-- Source Path: 
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_textio.ALL;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
LIBRARY STD;
USE STD.textio.ALL;
LIBRARY work;
USE work.Hamming_decoding_fixpt_pkg.ALL;
USE work.Hamming_decoding_fixpt_tb_pkg.ALL;

ENTITY Hamming_decoding_fixpt_tb IS
END Hamming_decoding_fixpt_tb;


ARCHITECTURE rtl OF Hamming_decoding_fixpt_tb IS

  -- Component Declarations
  COMPONENT Hamming_decoding_fixpt
    PORT( input_encoded                   :   IN    std_logic_vector(0 TO 11);  -- ufix1 [12]
          output                          :   OUT   std_logic_vector(0 TO 11);  -- ufix1 [12]
          errorPosition                   :   OUT   std_logic_vector(3 DOWNTO 0)  -- ufix4
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Hamming_decoding_fixpt
    USE ENTITY work.Hamming_decoding_fixpt(rtl);

  -- Signals
  SIGNAL clk                              : std_logic;
  SIGNAL reset                            : std_logic;
  SIGNAL enb                              : std_logic;
  SIGNAL output_addr                      : std_logic;  -- ufix1
  SIGNAL output_lastAddr                  : std_logic;  -- ufix1
  SIGNAL errorPosition_addr               : std_logic;  -- ufix1
  SIGNAL errorPosition_lastAddr           : std_logic;  -- ufix1
  SIGNAL errorPosition_done               : std_logic;  -- ufix1
  SIGNAL rdEnb                            : std_logic;
  SIGNAL errorPosition_done_enb           : std_logic;  -- ufix1
  SIGNAL resetn                           : std_logic;
  SIGNAL check2_done                      : std_logic;  -- ufix1
  SIGNAL snkDone                          : std_logic;
  SIGNAL snkDonen                         : std_logic;
  SIGNAL tb_enb                           : std_logic;
  SIGNAL output_done                      : std_logic;  -- ufix1
  SIGNAL output_done_enb                  : std_logic;  -- ufix1
  SIGNAL check1_done                      : std_logic;  -- ufix1
  SIGNAL ce_out                           : std_logic;
  SIGNAL rawData_input_encoded            : std_logic_vector(0 TO 11);  -- ufix1 [12]
  SIGNAL holdData_input_encoded           : std_logic_vector(0 TO 11);  -- ufix1 [12]
  SIGNAL input_encoded_offset             : std_logic_vector(0 TO 11);  -- ufix1 [12]
  SIGNAL input_encoded_1                  : std_logic_vector(0 TO 11);  -- ufix1 [12]
  SIGNAL output                           : std_logic_vector(0 TO 11);  -- ufix1 [12]
  SIGNAL errorPosition                    : std_logic_vector(3 DOWNTO 0);  -- ufix4
  SIGNAL output_expected_1                : std_logic_vector(0 TO 11);  -- ufix1 [12]
  SIGNAL output_ref                       : std_logic_vector(0 TO 11);  -- ufix1 [12]
  SIGNAL output_testFailure               : std_logic;  -- ufix1
  SIGNAL errorPosition_unsigned           : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL errorPosition_expected_1         : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL errorPosition_ref                : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL errorPosition_testFailure        : std_logic;  -- ufix1
  SIGNAL testFailure                      : std_logic;  -- ufix1

BEGIN
  u_Hamming_decoding_fixpt : Hamming_decoding_fixpt
    PORT MAP( input_encoded => input_encoded_1,  -- ufix1 [12]
              output => output,  -- ufix1 [12]
              errorPosition => errorPosition  -- ufix4
              );

  output_lastAddr <= '1';

  errorPosition_lastAddr <= '1';

  errorPosition_done_enb <= errorPosition_done AND rdEnb;

  errorPosition_done <= errorPosition_lastAddr AND resetn;

  -- Delay to allow last sim cycle to complete
  checkDone_2_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      check2_done <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF errorPosition_done_enb = '1' THEN
        check2_done <= errorPosition_done;
      END IF;
    END IF;
  END PROCESS checkDone_2_process;

  snkDonen <=  NOT snkDone;

  tb_enb <= resetn AND snkDonen;

  
  rdEnb <= tb_enb WHEN snkDone = '0' ELSE
      '0';

  output_done_enb <= output_done AND rdEnb;

  clk_gen: PROCESS 
  BEGIN
    clk <= '1';
    WAIT FOR 5 ns;
    clk <= '0';
    WAIT FOR 5 ns;
    IF snkDone = '1' THEN
      clk <= '1';
      WAIT FOR 5 ns;
      clk <= '0';
      WAIT FOR 5 ns;
      WAIT;
    END IF;
  END PROCESS clk_gen;

  reset_gen: PROCESS 
  BEGIN
    reset <= '1';
    WAIT FOR 20 ns;
    WAIT UNTIL clk'event AND clk = '1';
    WAIT FOR 2 ns;
    reset <= '0';
    WAIT;
  END PROCESS reset_gen;

  resetn <=  NOT reset;

  output_done <= output_lastAddr AND resetn;

  -- Delay to allow last sim cycle to complete
  checkDone_1_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      check1_done <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF output_done_enb = '1' THEN
        check1_done <= output_done;
      END IF;
    END IF;
  END PROCESS checkDone_1_process;

  snkDone <= check1_done AND check2_done;

  enb <= rdEnb AFTER 2 ns;

  ce_out <= enb AND (rdEnb AND tb_enb);

  -- Data source for input_encoded
  rawData_input_encoded(0) <= '0';
  rawData_input_encoded(1) <= '1';
  rawData_input_encoded(2) <= '1';
  rawData_input_encoded(3) <= '1';
  rawData_input_encoded(4) <= '0';
  rawData_input_encoded(5) <= '1';
  rawData_input_encoded(6) <= '0';
  rawData_input_encoded(7) <= '0';
  rawData_input_encoded(8) <= '1';
  rawData_input_encoded(9) <= '1';
  rawData_input_encoded(10) <= '1';
  rawData_input_encoded(11) <= '0';

  -- holdData reg for input_encoded
  stimuli_input_encoded_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      holdData_input_encoded <= (OTHERS => 'X');
    ELSIF clk'event AND clk = '1' THEN
      holdData_input_encoded <= rawData_input_encoded;
    END IF;
  END PROCESS stimuli_input_encoded_process;

  stimuli_input_encoded_1: PROCESS (rawData_input_encoded, rdEnb)
  BEGIN
    IF rdEnb = '0' THEN
      input_encoded_offset <= holdData_input_encoded;
    ELSE
      input_encoded_offset <= rawData_input_encoded;
    END IF;
  END PROCESS stimuli_input_encoded_1;

  input_encoded_1 <= input_encoded_offset AFTER 2 ns;

  -- Data source for output_expected
  output_expected_1(0) <= '0';
  output_expected_1(1) <= '1';
  output_expected_1(2) <= '1';
  output_expected_1(3) <= '1';
  output_expected_1(4) <= '0';
  output_expected_1(5) <= '1';
  output_expected_1(6) <= '0';
  output_expected_1(7) <= '0';
  output_expected_1(8) <= '1';
  output_expected_1(9) <= '1';
  output_expected_1(10) <= '0';
  output_expected_1(11) <= '0';

  output_ref <= output_expected_1;

  output_checker: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      output_testFailure <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF ce_out = '1' AND output /= output_ref THEN
        output_testFailure <= '1';
        ASSERT FALSE
          REPORT "Error in output: Expected " & to_hex(output_ref) & (" Actual " & to_hex(output))
          SEVERITY ERROR;
      END IF;
    END IF;
  END PROCESS output_checker;

  errorPosition_unsigned <= unsigned(errorPosition);

  -- Data source for errorPosition_expected
  errorPosition_expected_1 <= to_unsigned(16#B#, 4);

  errorPosition_ref <= errorPosition_expected_1;

  errorPosition_unsigned_checker: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      errorPosition_testFailure <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF ce_out = '1' AND errorPosition_unsigned /= errorPosition_ref THEN
        errorPosition_testFailure <= '1';
        ASSERT FALSE
          REPORT "Error in errorPosition_unsigned: Expected " & to_hex(errorPosition_ref) & (" Actual " & to_hex(errorPosition_unsigned))
          SEVERITY ERROR;
      END IF;
    END IF;
  END PROCESS errorPosition_unsigned_checker;

  testFailure <= output_testFailure OR errorPosition_testFailure;

  completed_msg: PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF snkDone = '1' THEN
        IF testFailure = '0' THEN
          ASSERT FALSE
            REPORT "**************TEST COMPLETED (PASSED)**************"
            SEVERITY NOTE;
        ELSE
          ASSERT FALSE
            REPORT "**************TEST COMPLETED (FAILED)**************"
            SEVERITY NOTE;
        END IF;
      END IF;
    END IF;
  END PROCESS completed_msg;

END rtl;

